export const API = {
  AUTH: {
    SIGNUP: '/userapi/register',
    LOGIN: '/userapi/weblogin',
    REQUEST_SMS_CODE: '/userapi/sms/request-sms-code',
    CHECK_USER: '/userapi/check-user',
    CHECK_PHONE: '/userapi/check-phone',
    EMAIL_EXPIRE: '/userapi/email/expired',
    CAPTCHA: 'userapi/captcha.jpg?uuid=',
    FIND_PASSWORD_BY_EMAIL: 'userapi/password/findbyemail',
    FIND_PASSWORD_BY_PHONE: 'userapi/password/findbyphone',
    RESET_PASSWORD: 'userapi/password/reset',
  },
  STORAGE: {
    CREATE_BASE_FOLDER: '/storageapi/create4folder',
    GET_FILE_LIST: '/storageapi/getfileslist',
    SEARCH_FILE_LIST: '/storageapi/search',
    DELETE_OBJECTS: '/storageapi/trashobjects',
    MOVE_OBJECT: '/storageapi/moveobjects',
    COPY_OBJECT: '/storageapi/copyobjects',
    SHARE_OBJECTS: '/storageapi/shareobjects',
    SHARE_OBJECT: '/storageapi/shareobject',
    RENAME_OBJECT: '/storageapi/renameobject',
    GET_INFO: '/storageapi/getinfo',
    VIEW_FILE: '/storageapi/viewobjects',
    EDIT_FILE: '/storageapi/editobjects',
    ENCRYPT_OBJECT: '/storageapi/encryptfile',
    DECOMPRESS_OBJECT: '/storageapi/decompressobjects',
    DECRYPT_OBJECT: '/storageapi/decryptfile',
    LOCKED_OBJECT: '/storageapi/lockedobjects',
    CREATE_FOLDER: '/storageapi/createfolder',
    GET_FILE_URL: '/storageapi/getfilesurl',
    BATCH_DOWNLOAD: '/storageapi/batchdownload',
    GET_UNZIP_SUPPORT_TYPES: '/storageapi/getunziptype',
    GET_FOLDER_TREE: '/storageapi/get-folder-tree',
    FILE_UNZIP: '/storageapi/filesunzip',
    COPY_OBJECTS: '/storageapi/copyobjects',
    MOVE_OBJECTS: '/storageapi/moveobjects',
    GET_ENCRYPTION_KEYS: '/storageapi/getusersymmetrickeylist',
    CREATE_FTP_TASK: '/storageapi/createftptask',
    UPLOAD_NEW_FILE: '/storageapi/uploadnewfile',
    GET_DECRYPT_FILE_LIST: '/storageapi/getdecryptfilelist',
    GET_FILE_SYSTEM_HASH: '/storageapi/v1/user/get/file-system-hash',
    GET_SESSION_CREDENTIALS: '/storageapi/getsessioncredentials',
    DUPPLICATE_CHECK: '/storageapi/v1/non-encrypted/upload/duplicate-check',
    GET_S3_FILE_KEY: '/storageapi/gets3filekey',
    UPLOAD_FILE: '/storageapi/uploadfile',
    UPLOAD_MEMBER_FILE: '/storageapi/uploadsubuserfile',
    GET_USER_SYMMETRIC_KEY_LIST: '/storageapi/getusersymmetrickeylist',
    UPDATE_USER_MASTER_PASSWORD: '/storageapi/updateusermasterpassword',
    ADD_SYMMETRIC_KEY: '/storageapi/addsymmetrickey',
    UPLOAD_SYMMECTRIC_KEY: '/storageapi/uploadsymmetrickey',
    INITIAL_USER_KEY_LIB: '/storageapi/initialuserkeylib',
    GET_IMPORT_PROGRESS: '/storageapi/listftptask',
    COLD_FILE_TO_HOT: 'storageapi/coolfiletohotfile',
    COLD_FILE: '/storageapi/coolfile',
    FROZEN_FILE: '/storageapi/frozenfile',
    RECYCLE_BIN_EMPTY_TRASH: '/storageapi/emptyTrash',
    RECYCLE_BIN_DELETE: '/storageapi/deleteobjects',
    GET_STORAGE_USAGE: '/storageapi/v1/storage/get/storage-usage',
    UPDATE_OBJECT: '/storageapi/updatefile',
  },
  USER: {
    ME: '/userapi/me',
    UPDATE: '/userapi/update/user',
    CHANGE_PASSWORD: '/userapi/update/password',
    CHANGE_PHONE: '/userapi/phoneUpdateHistoryServlet',
    CHANGE_EMAIL: '/userapi/userUpdateHistoryServlet',
    REQUEST_EMAIL_CODE: '/userapi/smsEmailServlet',
    REQUEST_SMS_CODE: '/userapi/smsPhonelServlet',
    REQUEST_DELETE_USER_SMS_CODE: '/userapi/sms/send/token',
    DELETE_USER: '/userapi/delete',
    GET_MEMBER_USERS: '/userapi/user/getmanagingUsers',
    GET_FRIEND_USERS: '/userapi/getuserfriends',
    SEND: '/userapi/message/send',
    BALANCE_CHECK: '/userapi/balance/check',
    GET_MANAGING_LIST: '/userapi/auth/manager/getmanaginglist',
    GET_ROLE: '/userapi/user/getRole',
    GET_MENUS_BY_USER: '/userapi/auth/get',
    GET_ALLOCABLE_LIMITS: '/userapi/auth/get-allocable-limits?user=khoat_09',
    UPDATE_TRUE_NAME: '/userapi/update/true-name',
    CREATE_NEW_MEMBERS: '/userapi/register/sendlink',
    CHECK_EMAIL_LIMIT: '/userapi/email/check',
    CHECK_REGISTER_LIMIT: '/userapi/register/check',
    GET_ROLES_LIST: '/userapi/role/manage/list',
    UPDATE_AUTH: '/userapi/auth/update',
    DELETE_ROLE: '/userapi/role/del',
    CREATE_ROLE: '/userapi/role/save',
    ASSIGN_ROLE: '/userapi/user/role/save',
    GET_MENUS_BY_ROLE: '/userapi/role/menu/list',
    UPDATE_MANAGER_ROLE: '/userapi/auth/manager/update',
    UPDATE_MANAGING_USERS: '/userapi/auth/manager/updatemanaging',
    TEAM_GET_TEAM_LIST: '/userapi/group/list',
    TEAM_OWNER_LIST: '/userapi/group/owner/list',
    TEAM_DELETE_TEAMS: '/userapi/group/deletebatch',
    TEAM_CREATE_TEAM: '/userapi/group/create',
    TEAM_GET_TEAM_DETAIL: '/userapi/group',
    TEAM_CHANGE_TEAM_NAME: '/userapi/group/update',
    TEAM_GET_TEAM_MEMBERS: 'userapi/group/getgroupmembers',
    TEAM_UPDATE_TEAM_MEMBERS: '/userapi/group/updategroupusers',
    TEAM_GET_TEAM_USERLIST: '/userapi/group/getgroupuserlist',
    TEAM_GET_TEAM_USER_PERMISSION_DETAIL: '/userapi/group/getsubusergroupauth',
    TEAM_UPDATE_TEAM_USER_PERMISSION: '/userapi/group/updatesubusergroupauth',
    TEAM_GET_USER_GROUP_AUTH: '/userapi/group/getusergroupauth',
    NOTIFICATION_GET_MESSAGES: '/userapi/getmessagelist',
    NOTIFICATION_GET_MESSAGES_NUMBER: '/userapi/getmessagenumber',
    UPDATE_NOTIFICATION_FLAG: '/userapi/message/updateflag',
    MARK_NOTIFICATION_AS_READ: '/userapi/message/batchupdate',
    DELETE_NOTIFICATIONS: '/userapi/message/batchdelete',
    PRICINGS: '/userapi/pricing/list',
    SEND_EMAIL_VALIDATION_CODE: 'userapi/smsEailValidationCode',
    SEND_EMAIL_VALIDATION: 'userapi/smsEailValidation',
    OPERATION_LOG_GET_USER_OPERATION_LOGGING: '/userapi/getuseroperationlog',
    PAYMENT_TOTAL_COIN_AMOUNT: '/userapi/coin/totalamount',
    PAYMENT_TOTAL_BALANCE: '/userapi/balance/get',
    PAYMENT_HISTORY: '/userapi/order/getlist',
    PAYMENT_GET_BILLED_TOTAL: '/userapi/balance/SumWaitPayFee',
    PAYMENT_GET_PAYMENT_DETAILS: '/userapi/list/paymentdetail',
  },
  MACHINE: {
    GET_DATA_DRIVES: '/machine/datadrive/list',
    CHECK_DATA_DRIVE_NAME: '/machine/datadrive/checkname',
    CREATE_DATA_DRIVE: '/machine/datadrive/create',
    DELETE_DATA_DRIVE: '/machine/datadrive/delete',
    RENAME_DATA_DRIVE: '/machine/datadrive/rename',
    GET_MACHINE_IMAGES_LIST: '/machine/image/list',
    GET_TEAM_LIST: '/machine/image/listgroup',
    GET_MACHINE_IMAGE_DETAIL: '/machine/image/view',
    GET_MACHINE_COUNT: '/machine/instance/count',
    GET_MACHINE_LIMIT: 'machine/instance/limit',
    GET_MACHINE_INSTANCE_TYPES: '/machine/instance/type',
    LAUNCH_CLOUD_PC_INSTANCE: '/machine/instance/create',
    ESTIMATE_LAUNCH_INSTANCE: '/machine/instance/estimate/runduration',
    GET_MACHINE_INSTANCES_LIST: '/machine/instance/list',
    GET_MACHINE_INSTANCE_DETAIL: '/machine/instance',
    STARTDOWN_MACHINE_INSTANCE: '/machine/instance/startDownMachine',
    PAUSE_MACHINE_INSTANCE: '/machine/instance/pause',
    RESUME_MACHINE_INSTANCE: '/machine/instance/resume',
    SHUTDOWN_MACHINE_INSTANCE: '/machine/instance/shutdown',
    SHUTDOWN_MACHINE_LIST_GROUP: '/machine/image/listgroup',
  },
  MEMBER_CENTER: {
    REQUEST_MEMBER_ORDER_RECORD: '/membercenter/member-order-record/get',
    GET_SUBSCRIPTION_RECORDS: '/membercenter/memberinfo/list',
  },
  PAYMENT: {
    PAY_WITH_BALANCE: 'userapi/balance/order-subscription',
    STRIPE_CREATE_PAYMENT_INTENT: '/stripe-payment-api/create-payment-intent',
    AMAZON_CREATE_ORDER: '/amazonpaymentapi/setOrderReference',
    AMAZON_CONFIRM_PAYMENT: '/amazonpaymentapi/confirmOrderReference',
    AMAZON_CREATE_CHECKOUT_SESSION: '/amazonpaymentapi/create-checkout-session',
    AMAZON_GET_CHECKOUT_SESSION: '/amazonpaymentapi/get-checkout-session',
    AMAZON_COMPLETED_ORDER: '/amazonpaymentapi/complete-order',
    AMAZON_UPDATE_CHECKOUT_SESSION:
      '/amazonpaymentapi/update-payment-information',
  },
  PROJECT: {
    GET_LINKED_NOTES: '/projectapi/project/getLinks',
    GET_PROJECTS: '/projectapi/project/list',
    CREATE_NEW_PROJECT: '/projectapi/project/add',
    DELETE_PROJECT: '/projectapi/project/delete',
    GET_PROJECT_DETAIL: '/projectapi/project/info',
    UPDATE_PROJECT_INFO: '/projectapi/project/update/info',
    GET_PROJECT_NOTEPAGES: '/projectapi/notepage/list',
    UPDATE_PROJECT_NOTEPAGE: '/projectapi/notepage/updateinfo',
    CREATE_PROJECT_NOTEPAGE: '/projectapi/notepage/save',
    GET_PROJECT_NOTES: '/projectapi/note/list',
    GET_PROJECT_MEMBERS: '/projectapi/member/list',
    REMOVE_PROJECT_MEMBER: '/projectapi/member/remove',
    ADD_PROJECT_MEMBER: '/projectapi/member/add',
    GET_UN_PROJECT_MEMBERS: '/projectapi/member/listunprojectmember',
    GET_PROJECT_MEMBER_PERMISSION_DETAIL: '/projectapi/member/getpermissions',
    SET_PROJECT_MEMBER_MANAGEMENT_ROLE: '/projectapi/member/manager/set',
    CANCEL_PROJECT_MEMBER_MANAGEMENT_ROLE: '/projectapi/member/manager/cancel',
    DELETE_PROJECT_NOTEPAGES: '/projectapi/notepage/delete',
    COPY_PROJECT_NOTEPAGE: '/projectapi/notepage/copy',
    DELETE_PROJECT_NOTES: '/projectapi/note/deletenote',
    SORT_PROJECT_NOTES: '/projectapi/notepage/sort',
    GET_DELETED_PROJECT_NOTES: '/projectapi/note/listdelete',
    REVERT_DELETED_PROJECT_NOTES: '/projectapi/note/revert/deleted',
    GET_DELETED_PROJECT_NOTE_HISTORY: '/projectapi/notehistory/list',
    REVERT_DELETED_PROJECT_NOTE_HISTORY: '/projectapi/note/revert/history',
    CREATE_PROJECT_NOTE: '/projectapi/note/save',
    GET_OTHER_NOTEPAGES: '/projectapi/notepage/listothers',
    UPDATE_PROJECT_PROPERTIES: '/projectapi/project/update/properties',
    BOOKMARK_PROJECT_NOTE: '/projectapi/note/star',
    UPDATE_PROJECT_PERMISSION: '/projectapi/member/updateauth',
    UPDATE_PROJECT_NOTE: '/projectapi/note/updatenote',
  },
  KEY_MANAGER: {},
  CHAT: {
    PRIVATE_CHAT: {
      QUERY_ENTRY: 'gate.gateHandler.queryEntry',
      GET_FRIENDS_LIST: 'chat.friendsHandler.getFriendsList',
      UPDATE_NICK_NAME: 'chat.friendsHandler.updateNickName',
      FIND_USER: 'chat.friendsHandler.findUser',
      PUSH_FRIEND_INVITE: 'chat.friendsHandler.pushFriendInvite',
      AGREE_FRIEND_INVITE: 'chat.friendsHandler.agreeFriendInvite',
      IGNORE_FRIEND_INVITE: 'chat.friendsHandler.ignoreFriendInvite',
      GET_FRIENDS_INVITE_MESSAGES:
        'chat.friendsHandler.getFriendsInviteMessages',
      DELETE_FRIENDS: 'chat.friendsHandler.deleteFriends',
      GET_CHAT_MESSAGES: 'chat.chatHandler.getChatMessages',
      UPDATE_MESSAGE_BY_ID: 'chat.chatHandler.updateMessageById',
      SEND: 'chat.chatHandler.send',
      ACCEPT_SHARE_FILE: 'chat.chatHandler.acceptShareFile',
      SHARE_FILE: 'chat.chatHandler.shareFile',
      REFUSE_SHARE_FILE: 'chat.chatHandler.refuseShareFile',
      CONNECTOR: 'chat.chatHandler.connector',
      ENTER: 'connector.entryHandler.enter',
    },
    GROUP_CHAT: {
      GET_GROUP_AND_AUTH: 'chat.groupAndAuthHandler.getGroupAndAuth',
      GET_LAST_MESSAGE: 'chat.groupAndAuthHandler.getLastMessage',
      PUT_USER_INTO_GROUP_AND_AUTH:
        'chat.groupAndAuthHandler.putUserIntoGroupAndAuth',
      GET_GROUP_CHAT_MESSAGES: 'chat.groupChatHandler.getGroupChatMessages',
      GET_GROUP_AND_AUTH_MEMBERS_INFO:
        'chat.groupAndAuthHandler.getGroupAndAuthMembersInfo',
      IS_FRIEND: 'chat.groupChatHandler.isFriend',
      SEND_GROUP_MESSAGE: 'chat.groupAndAuthHandler.sendGroupMessage',
      ENTER_GROUP_CHAT: 'connector.entryHandler.enterGroupChat',
      ENTER_ROOM2: 'connector.entryHandler.enterRoom2',
      UPDATE_GROUP_NAME: 'chat.groupChatHandler.updateGroupName',
      GET_MANAGING_USER_LIST: 'chat.groupAndAuthHandler.getManagingUserList',
      UPDATE_LAST_MESSAGE_ID: 'chat.groupAndAuthHandler.updateLastMessageId',
      SHARE_GROUP_FILE: 'chat.groupAndAuthHandler.shareGroupFile',
      ACCEPT_GROUP_FILE: 'chat.groupChatHandler.acceptGroupFile',
      GET_GROUP_SHARE_FILE: 'chat.groupChatHandler.getGroupShareFile',
      GET_GROUP_MEMBERS_INFO: 'chat.groupAndAuthHandler.getGroupMembersInfo',
      UPDATE_REMARK_NAME: 'chat.groupAndAuthHandler.updateRemarkName',
    },
    CONVERSATION_CHAT: {
      ADD_USERS_IN_GROUP_CONVERSATION:
        'chat.groupConverHandler.addUsersInGroupConversation',
      GET_CONVERSATION_LIST: 'chat.groupConverHandler.getConversationList',
      SEND_CONVERSATION_MESSAGE: 'chat.groupConverHandler.sendGroupMessage',
      GET_CONVERSATION_MEMBERS:
        'chat.groupConverHandler.getConversationMembers',
      UPDATE_LAST_MESSAGE_ID_CONVER:
        'chat.groupConverHandler.updateLastMessageId',
      EXIST_CONVERSATION: 'chat.groupConverHandler.existConversation',
      UPDATE_REMARK_NAME: 'chat.groupConverHandler.updateRemarkName',
      GET_LAST_MESSAGE: 'chat.groupConverHandler.getLastMessage',
      GET_GROUP_MEMBERS_INFO:
        'chat.groupConverHandler.getConversationMembersInfo',
      SHARE_GROUP_FILE: 'chat.groupConverHandler.shareGroupFile',
    },
    PROJECT_CHAT: {
      GET_PROJECT_LIST: 'chat.projectHandler.getProjectList',
      GET_PROJECT_MEMBER_LIST: 'chat.projectHandler.getProjectMemberList',
      SEND_MESSAGE: 'chat.projectHandler.send',
      SHARE_FILE: 'chat.projectHandler.shareFile',
      UPDATE_LAST_MSG_ID: 'chat.projectHandler.updateLastMsgId',
      UPDATE_REMARK_NAME: 'chat.projectHandler.updateRemarkName',
      GET_GROUP_CHAT_MESSAGES: 'chat.groupChatHandler.getGroupChatMessages', // why same
      ACCEPT_GROUP_FILE: 'chat.groupChatHandler.acceptGroupFile', //
      GET_GROUP_SHARE_FILE: 'chat.groupChatHandler.getGroupShareFile', //
    },
    GET_FILE_UPLOAD_PROCESS: 'chat.ftpFileHandler.getFileUploadProcess',
  },
}
